#include "StdAfx.h"
#include "CALG_RC4.h"

#include <wincrypt.h>
#include <conio.h>

// Link with the Advapi32.lib file.
#pragma comment (lib, "advapi32")

#define KEYLENGTH  0x00800000
#define ENCRYPT_ALGORITHM CALG_RC4 
#define ENCRYPT_BLOCK_SIZE 8 

CCALG_RC4::CCALG_RC4()
{
}


CCALG_RC4::~CCALG_RC4()
{
}

void CCALG_RC4::ErrorHandler(LPTSTR psz, int nErrorNumber)
{
	_ftprintf(stderr, TEXT("An error occurred in the program. \n"));
	_ftprintf(stderr, TEXT("%s\n"), psz);
	_ftprintf(stderr, TEXT("Error number %x.\n"), nErrorNumber);
}

bool CCALG_RC4::DoDecryptFile(LPTSTR pszSourceFile, LPTSTR pszDestinationFile, LPTSTR pszPassword)
{
	// Declare and initialize local variables.
	bool fReturn = false;
	HANDLE hSourceFile = INVALID_HANDLE_VALUE;
	HANDLE hDestinationFile = INVALID_HANDLE_VALUE;
	HCRYPTKEY hKey = NULL;
	HCRYPTHASH hHash = NULL;

	HCRYPTPROV hCryptProv = NULL;

	DWORD dwCount;
	PBYTE pbBuffer = NULL;
	DWORD dwBlockLen;
	DWORD dwBufferLen;

	// Open the source file. 
	hSourceFile = CreateFile(
		pszSourceFile,
		FILE_READ_DATA,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (INVALID_HANDLE_VALUE == hSourceFile)
	{
		ErrorHandler(
			TEXT("Error opening source plaintext file!\n"),
			GetLastError());
		goto Exception_DecryptFile;
	}

	// Open the destination file. 
	hDestinationFile = CreateFile(
		pszDestinationFile,
		FILE_WRITE_DATA,
		FILE_SHARE_READ,
		NULL,
		OPEN_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (INVALID_HANDLE_VALUE == hDestinationFile)
	{
		ErrorHandler(
			TEXT("Error opening destination file!\n"),
			GetLastError());
		goto Exception_DecryptFile;
	}

	// Get the handle to the default provider. 
	if (CryptAcquireContext(
		&hCryptProv,
		NULL,
		MS_ENHANCED_PROV,
		PROV_RSA_FULL,
		0) == 0)
	{
		if (GetLastError() == NTE_BAD_KEYSET)
		{
			if (CryptAcquireContext(
				&hCryptProv,
				NULL,
				MS_ENHANCED_PROV,
				PROV_RSA_FULL,
				CRYPT_NEWKEYSET) == 0)
			{
				ErrorHandler(
					TEXT("Error during CryptAcquireContext!\n"),
					GetLastError());
				goto Exception_DecryptFile;
			}
		}
		else
		{
			ErrorHandler(
				TEXT("Error during CryptAcquireContext!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

	}

	// Create the session key.
	if (!pszPassword || !pszPassword[0])
	{
		// Decrypt the file with the saved session key. 

		DWORD dwKeyBlobLen;
		PBYTE pbKeyBlob = NULL;

		// Read the key BLOB length from the source file. 
		if (!ReadFile(
			hSourceFile,
			&dwKeyBlobLen,
			sizeof(DWORD),
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error reading key BLOB length!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		// Allocate a buffer for the key BLOB.
		if (!(pbKeyBlob = (PBYTE)malloc(dwKeyBlobLen)))
		{
			ErrorHandler(
				TEXT("Memory allocation error.\n"),
				E_OUTOFMEMORY);
		}

		// Read the key BLOB from the source file. 
		if (!ReadFile(
			hSourceFile,
			pbKeyBlob,
			dwKeyBlobLen,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error reading key BLOB length!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		// Import the key BLOB into the CSP. 
		if (!CryptImportKey(
			hCryptProv,
			pbKeyBlob,
			dwKeyBlobLen,
			0,
			0,
			&hKey))
		{
			ErrorHandler(
				TEXT("Error during CryptImportKey!/n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		if (pbKeyBlob)
		{
			free(pbKeyBlob);
		}
	}
	else
	{
		// Decrypt the file with a session key derived from a password. 

		// Create a hash object. 
		if (!CryptCreateHash(
			hCryptProv,
			CALG_MD5,
			0,
			0,
			&hHash))
		{
			ErrorHandler(
				TEXT("Error during CryptCreateHash!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		// Hash in the password data. 
		if (!CryptHashData(
			hHash,
			(BYTE *)pszPassword,
			lstrlen(pszPassword),
			0))
		{
			ErrorHandler(
				TEXT("Error during CryptHashData!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}
		// Derive a session key from the hash object. 
		if (!CryptDeriveKey(
			hCryptProv,
			ENCRYPT_ALGORITHM,
			hHash,
			KEYLENGTH,
			&hKey))
		{
			ErrorHandler(
				TEXT("Error during CryptDeriveKey!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}
	}

	//---------------------------------------------------------------
	// The decryption key is now available, either having been 
	// imported from a BLOB read in from the source file or having 
	// been created by using the password. This point in the program 
	// is not reached if the decryption key is not available.
	//---------------------------------------------------------------

	//---------------------------------------------------------------
	// Determine the number of bytes to decrypt at a time. 
	// This must be a multiple of ENCRYPT_BLOCK_SIZE. 
	//---------------------------------------------------------------
	dwBlockLen = 1000 - 1000 % ENCRYPT_BLOCK_SIZE;

	// Determine the block size. If a block cipher is used, 
	// it must have room for an extra block. 
	if (ENCRYPT_BLOCK_SIZE > 1)
	{
		dwBufferLen = dwBlockLen + ENCRYPT_BLOCK_SIZE;
	}
	else
	{
		dwBufferLen = dwBlockLen;
	}

	// Allocate memory for the file read buffer. 
	if (!(pbBuffer = (PBYTE)malloc(dwBufferLen)))
	{
		ErrorHandler(TEXT("Out of memory!\n"), E_OUTOFMEMORY);
		goto Exception_DecryptFile;
	}

	// Decrypt the source file, and write to the destination file. 
	bool fEOF = false;
	do
	{
		// Read up to dwBlockLen bytes from the source file. 
		if (!ReadFile(
			hSourceFile,
			pbBuffer,
			dwBlockLen,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error reading from source file!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		if (dwCount < dwBlockLen)
		{
			fEOF = TRUE;
		}

		// Decrypt the block of data. 
		if (!CryptDecrypt(
			hKey,
			0,
			fEOF,
			0,
			pbBuffer,
			&dwCount))
		{
			ErrorHandler(
				TEXT("Error during CryptDecrypt!\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		// Write the decrypted data to the destination file. 
		if (!WriteFile(
			hDestinationFile,
			pbBuffer,
			dwCount,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error writing ciphertext.\n"),
				GetLastError());
			goto Exception_DecryptFile;
		}

		// End the do loop when the last block of the source file 
		// has been read, encrypted, and written to the destination 
		// file.
	} while (!fEOF);

	fReturn = true;

Exception_DecryptFile:
	// Free the file read buffer.
	if (pbBuffer)
	{
		free(pbBuffer);
	}

	// Close files.
	if (hSourceFile)
	{
		CloseHandle(hSourceFile);
	}

	if (hDestinationFile)
	{
		CloseHandle(hDestinationFile);
	}

	// Release the hash object. 
	if (hHash)
	{
		if (!(CryptDestroyHash(hHash)))
		{
			ErrorHandler(
				TEXT("Error during CryptDestroyHash.\n"),
				GetLastError());
		}

		hHash = NULL;
	}

	// Release the session key. 
	if (hKey)
	{
		if (!(CryptDestroyKey(hKey)))
		{
			ErrorHandler(
				TEXT("Error during CryptDestroyKey!\n"),
				GetLastError());
		}
	}

	// Release the provider handle. 
	if (hCryptProv)
	{
		if (!(CryptReleaseContext(hCryptProv, 0)))
		{
			ErrorHandler(
				TEXT("Error during CryptReleaseContext!\n"),
				GetLastError());
		}
	}

	// Remove the orignal file 
	if (fReturn)
	{
		bool bSuccess = DeleteFile(pszSourceFile);
		if (!bSuccess)
		{
			ErrorHandler(
				TEXT("Error during DeleteFile!\n"),
				GetLastError());
		}
	}

	return fReturn;
}

bool CCALG_RC4::DoEncryptFile(LPTSTR pszSourceFile, LPTSTR pszDestinationFile, LPTSTR pszPassword)
{
	// Declare and initialize local variables.
	bool fReturn = false;
	HANDLE hSourceFile = INVALID_HANDLE_VALUE;
	HANDLE hDestinationFile = INVALID_HANDLE_VALUE;

	HCRYPTPROV hCryptProv = NULL;
	HCRYPTKEY hKey = NULL;
	HCRYPTKEY hXchgKey = NULL;
	HCRYPTHASH hHash = NULL;

	PBYTE pbKeyBlob = NULL;
	DWORD dwKeyBlobLen;

	PBYTE pbBuffer = NULL;
	DWORD dwBlockLen;
	DWORD dwBufferLen;
	DWORD dwCount;

	// Open the source file. 
	hSourceFile = CreateFile(
		pszSourceFile,
		FILE_READ_DATA,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (INVALID_HANDLE_VALUE == hSourceFile) {
		ErrorHandler(
			TEXT("Error opening source plaintext file!\n"),
			GetLastError());
		goto Exception_EncryptFile;
	}

	// Open the destination file. 
	hDestinationFile = CreateFile(
		pszDestinationFile,
		FILE_WRITE_DATA,
		FILE_SHARE_READ,
		NULL,
		OPEN_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (INVALID_HANDLE_VALUE == hDestinationFile) {
		ErrorHandler(
			TEXT("Error opening destination file!\n"),
			GetLastError());
		goto Exception_EncryptFile;
	}

	// Get the handle to the default provider. 
	if (CryptAcquireContext(
		&hCryptProv,
		NULL,
		MS_ENHANCED_PROV,
		PROV_RSA_FULL,
		0) == 0)
	{
		if (GetLastError() == NTE_BAD_KEYSET)
		{
			if (CryptAcquireContext(
				&hCryptProv,
				NULL,
				MS_ENHANCED_PROV,
				PROV_RSA_FULL,
				CRYPT_NEWKEYSET) == 0)
			{
				ErrorHandler(
					TEXT("Error during CryptAcquireContext!\n"),
					GetLastError());
				goto Exception_EncryptFile;
			}
		}
		else
		{
			ErrorHandler(
				TEXT("Error during CryptAcquireContext!\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}
		
	}

	// Create the session key.
	if (!pszPassword || !pszPassword[0])
	{
		//-----------------------------------------------------------
		// No password was passed.
		// Encrypt the file with a random session key, and write the 
		// key to a file. 
		//-----------------------------------------------------------

		// Create a random session key. 
		if (!CryptGenKey(
			hCryptProv,
			ENCRYPT_ALGORITHM,
			KEYLENGTH | CRYPT_EXPORTABLE,
			&hKey))
		{
			ErrorHandler(
				TEXT("Error during CryptGenKey. \n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Get the handle to the exchange public key. 
		if (!CryptGetUserKey(
			hCryptProv,
			AT_KEYEXCHANGE,
			&hXchgKey))
		{
			if (NTE_NO_KEY == GetLastError())
			{
				// No exchange key exists. Try to create one.
				if (!CryptGenKey(
					hCryptProv,
					AT_KEYEXCHANGE,
					CRYPT_EXPORTABLE,
					&hXchgKey))
				{
					ErrorHandler(
						TEXT("Could not create a user public key.\n"),
						GetLastError());
					goto Exception_EncryptFile;
				}
			}
			else
			{
				ErrorHandler(
					TEXT("User public key is not available and may not exist.\n"),
					GetLastError());
				goto Exception_EncryptFile;
			}
		}

		// Determine size of the key BLOB, and allocate memory. 
		if (!CryptExportKey(
			hKey,
			hXchgKey,
			SIMPLEBLOB,
			0,
			NULL,
			&dwKeyBlobLen))
		{
			ErrorHandler(
				TEXT("Error computing BLOB length! \n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		if (!(pbKeyBlob = (BYTE *)malloc(dwKeyBlobLen)))
		{
			ErrorHandler(TEXT("Out of memory. \n"), E_OUTOFMEMORY);
			goto Exception_EncryptFile;
		}

		// Encrypt and export the session key into a simple key BLOB. 
		if (!CryptExportKey(
			hKey,
			hXchgKey,
			SIMPLEBLOB,
			0,
			pbKeyBlob,
			&dwKeyBlobLen))
		{
			ErrorHandler(
				TEXT("Error during CryptExportKey!\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Release the key exchange key handle. 
		if (hXchgKey)
		{
			if (!(CryptDestroyKey(hXchgKey)))
			{
				ErrorHandler(
					TEXT("Error during CryptDestroyKey.\n"),
					GetLastError());
				goto Exception_EncryptFile;
			}

			hXchgKey = 0;
		}

		// Write the size of the key BLOB to the destination file. 
		if (!WriteFile(
			hDestinationFile,
			&dwKeyBlobLen,
			sizeof(DWORD),
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error writing header.\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Write the key BLOB to the destination file. 
		if (!WriteFile(
			hDestinationFile,
			pbKeyBlob,
			dwKeyBlobLen,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error writing header.\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		free(pbKeyBlob);
	}
	else
	{

		//-----------------------------------------------------------
		// The file will be encrypted with a session key derived 
		// from a password.
		// The session key will be recreated when the file is 
		// decrypted only if the password used to create the key is 
		// available. 
		//-----------------------------------------------------------

		// Create a hash object. 
		if (!CryptCreateHash(
			hCryptProv,
			CALG_MD5,
			0,
			0,
			&hHash))
		{
			ErrorHandler(
				TEXT("Error during CryptCreateHash!\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Hash the password. 
		if (!CryptHashData(
			hHash,
			(BYTE *)pszPassword,
			lstrlen(pszPassword),
			0))
		{
			ErrorHandler(
				TEXT("Error during CryptHashData. \n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Derive a session key from the hash object. 
		if (!CryptDeriveKey(
			hCryptProv,
			ENCRYPT_ALGORITHM,
			hHash,
			KEYLENGTH,
			&hKey))
		{
			ErrorHandler(
				TEXT("Error during CryptDeriveKey!\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}
	}

	//---------------------------------------------------------------
	// The session key is now ready. If it is not a key derived from 
	// a  password, the session key encrypted with the private key 
	// has been written to the destination file.
	//---------------------------------------------------------------

	//---------------------------------------------------------------
	// Determine the number of bytes to encrypt at a time. 
	// This must be a multiple of ENCRYPT_BLOCK_SIZE.
	// ENCRYPT_BLOCK_SIZE is set by a #define statement.
	//---------------------------------------------------------------
	dwBlockLen = 1000 - 1000 % ENCRYPT_BLOCK_SIZE;

	// Determine the block size. If a block cipher is used, 
	// it must have room for an extra block. 
	if (ENCRYPT_BLOCK_SIZE > 1)
	{
		dwBufferLen = dwBlockLen + ENCRYPT_BLOCK_SIZE;
	}
	else
	{
		dwBufferLen = dwBlockLen;
	}

	// Allocate memory. 
	if (!(pbBuffer = (BYTE *)malloc(dwBufferLen)))
	{
		ErrorHandler(TEXT("Out of memory. \n"), E_OUTOFMEMORY);
		goto Exception_EncryptFile;
	}

	// In a do loop, encrypt the source file, 
	// and write to the source file. 
	bool fEOF = FALSE;
	do
	{
		// Read up to dwBlockLen bytes from the source file. 
		if (!ReadFile(
			hSourceFile,
			pbBuffer,
			dwBlockLen,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error reading plaintext!\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		if (dwCount < dwBlockLen)
		{
			fEOF = TRUE;
		}

		// Encrypt data. 
		if (!CryptEncrypt(
			hKey,
			NULL,
			fEOF,
			0,
			pbBuffer,
			&dwCount,
			dwBufferLen))
		{
			ErrorHandler(
				TEXT("Error during CryptEncrypt. \n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// Write the encrypted data to the destination file. 
		if (!WriteFile(
			hDestinationFile,
			pbBuffer,
			dwCount,
			&dwCount,
			NULL))
		{
			ErrorHandler(
				TEXT("Error writing ciphertext.\n"),
				GetLastError());
			goto Exception_EncryptFile;
		}

		// End the do loop when the last block of the source file 
		// has been read, encrypted, and written to the destination 
		// file.
	} while (!fEOF);

	fReturn = true;

Exception_EncryptFile:
	// Close files.
	if (hSourceFile)
	{
		CloseHandle(hSourceFile);
	}

	if (hDestinationFile)
	{
		CloseHandle(hDestinationFile);
	}

	// Free memory. 
	if (pbBuffer)
	{
		free(pbBuffer);
	}

	// Release the hash object. 
	if (hHash)
	{
		if (!(CryptDestroyHash(hHash)))
		{
			ErrorHandler(
				TEXT("Error during CryptDestroyHash.\n"),
				GetLastError());
		}

		hHash = NULL;
	}

	// Release the session key. 
	if (hKey)
	{
		if (!(CryptDestroyKey(hKey)))
		{
			ErrorHandler(
				TEXT("Error during CryptDestroyKey!\n"),
				GetLastError());
		}
	}

	// Release the provider handle. 
	if (hCryptProv)
	{
		if (!(CryptReleaseContext(hCryptProv, 0)))
		{
			ErrorHandler(
				TEXT("Error during CryptReleaseContext!\n"),
				GetLastError());
		}
	}

	// Remove the orignal file 
	if (fReturn)
	{
		DeleteFile(pszSourceFile);
	}
	
	return fReturn;
}